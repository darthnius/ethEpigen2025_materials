logcounts(sample4) =NULL
sample4 = logNormCounts(sample4)
setwd("C:/Users/nilss/Documents/single cell analyysis/data sc")
fullmerged = readRDS(file.path("batch corrected/MHA batch corrected heatmap.rds"))
sample1 = readRDS(file.path("MHA1 sample/MHA1 sample processed.rds"))
sample1$Sample = "MHA1"
sample1$Barcode2 = paste0(colData(sample1)$Barcode, "_", "MHA1")
colnames(sample1) = sample1$Barcode2
sample1 = sample1[,intersect(colnames(sample1), colnames(fullmerged[,fullmerged$cluster==1]))]
logcounts(sample1) =NULL
sample1 = logNormCounts(sample1)
sample2 = readRDS(file.path("MHA2 sample/MHA2 sample processed.rds"))
sample2$Sample = "MHA2"
sample2$Barcode2 =  paste0(colData(sample2)$Barcode, "_", "MHA2")
colnames(sample2) = sample2$Barcode2
sample2 = sample2[,intersect(colnames(sample2), colnames(fullmerged[,fullmerged$cluster==1]))]
logcounts(sample2) =NULL
sample2 = logNormCounts(sample2)
sample3 = readRDS(file.path("MHA3 sample/MHA3 sample processed.rds"))
sample3$Sample = "MHA3"
sample3$Barcode2 =  paste0(colData(sample3)$Barcode, "_", "MHA3")
colnames(sample3) = sample3$Barcode2
sample3 = sample3[,intersect(colnames(sample3), colnames(fullmerged[,fullmerged$cluster==1]))]
logcounts(sample3) =NULL
sample3 = logNormCounts(sample3)
sample4 = readRDS(file.path("MHA4 sample/MHA4 sample processed.rds"))
sample4$Sample = "MHA4"
sample4$Barcode2 =  paste0(colData(sample4)$Barcode, "_", "MHA4")
colnames(sample4) = sample4$Barcode2
sample4 = sample4[,intersect(colnames(sample4), colnames(fullmerged[,fullmerged$cluster==1]))]
logcounts(sample4) =NULL
sample4 = logNormCounts(sample4)
options(future.globals.maxSize = 1572864000)
unia <- intersect(rownames(sample1), rownames(sample2))
unib <- intersect(rownames(sample3), rownames(sample4))
universe <- intersect(unia, unib)
#Now in each dataset we only keep the common genes
sample1 <- sample1[universe,]
sample2 <- sample2[universe,]
sample3 <- sample3[universe,]
sample4 <- sample4[universe,]
options(future.globals.maxSize = 1572864000)
#rescaled <- multiBatchNorm(mec1, mec2, mec3)
rescaled <- multiBatchNorm(sample1, sample2, sample3, sample4)
#The nusampleers below correspond to the order you put the datasets in the multiBatchNorm() function above
sample1<- rescaled[[1]]
sample2 <- rescaled[[2]]
sample3 <- rescaled[[3]]
sample4 <- rescaled[[4]]
dec.pois.sample1 <- modelGeneVarByPoisson(sample1)
dec.pois.sample2 <- modelGeneVarByPoisson(sample2)
dec.pois.sample3 <- modelGeneVarByPoisson(sample3)
dec.pois.sample4 <- modelGeneVarByPoisson(sample4)
combined.dec <- combineVar(dec.pois.sample1, dec.pois.sample2, dec.pois.sample3, dec.pois.sample4)
chosen.hvgs <- combined.dec$bio > 0
sum(chosen.hvgs)
uncorrected <- cbind(sample1, sample2, sample3, sample4)
uncorrected
options(future.globals.maxSize = 1572864000)
set.seed(0010101010)
uncorrected <- runPCA(uncorrected, subset_row=chosen.hvgs,
BSPARAM=BiocSingular::RandomParam())
snn.gr <- buildSNNGraph(uncorrected, use.dimred="PCA")
clusters <- igraph::cluster_walktrap(snn.gr)$membership
tab <- table(Cluster=clusters, Batch=uncorrected$Sample)
tab
set.seed(1111001)
uncorrected <- runTSNE(uncorrected, dimred="PCA")
plotTSNE(uncorrected, colour_by="Sample")
set.seed(1111001)
uncorrected <- runUMAP(uncorrected, dimred="PCA")
plotUMAP(uncorrected, colour_by="Sample")
#We need to tell to the RunHarmony() function that we need to correct the batch effect of the different datasets with the group.by.vars argument
merged = RunHarmony(uncorrected, group.by.vars = "Sample", plot_convergence = TRUE)
#We recalculate the TSNE and the UMAP but based on the HARMONY dimension (generated with the previus function). This HARMONY dimension is similar to a PCA but now taking into account (and correcting) for the batch effect between the datasets
set.seed(1111001)
merged <- runTSNE(merged, dimred="HARMONY", external_neighbors=TRUE)
plotTSNE(merged, colour_by="Sample")
set.seed(1111001)
merged <- runUMAP(merged, dimred="HARMONY", external_neighbors=TRUE)
plotUMAP(merged, colour_by="Sample")
#We need to tell to the RunHarmony() function that we need to correct the batch effect of the different datasets with the group.by.vars argument
merged = RunHarmony(uncorrected, group.by.vars = "Sample", plot_convergence = TRUE)
#We recalculate the TSNE and the UMAP but based on the HARMONY dimension (generated with the previus function). This HARMONY dimension is similar to a PCA but now taking into account (and correcting) for the batch effect between the datasets
set.seed(1111001)
merged <- runTSNE(merged, dimred="HARMONY", external_neighbors=TRUE)
plotTSNE(merged, colour_by="Sample")
set.seed(1111001)
merged <- runUMAP(merged, dimred="HARMONY", external_neighbors=TRUE)
plotUMAP(merged, colour_by="Sample")
saveRDS(merged, "C:/Users/nilss/Documents/single cell analyysis/data sc/batch corrected/MHA batch corrected only EC.rds")
suppressWarnings(suppressPackageStartupMessages({
library(scater)
library(RColorBrewer)
library(cowplot)
library(scran)
library(DropletUtils)
library(edgeR)
library(Seurat)
library(dplyr)
}))
suppressWarnings(suppressPackageStartupMessages({
library(scater)
library(RColorBrewer)
library(cowplot)
library(scran)
library(DropletUtils)
library(edgeR)
library(Seurat)
library(dplyr)
}))
setwd("C:/Users/nilss/Documents/single cell analyysis/data sc")
filtered = readRDS(file.path("batch corrected/MHAplotT
batch corrected heatmap only EC.rds"))
setwd("C:/Users/nilss/Documents/single cell analyysis/data sc")
filtered = readRDS(file.path("batch corrected/MHA batch corrected heatmap only EC.rds"))
suppressWarnings(suppressPackageStartupMessages({
library(ggplot2)
library(scater)
library(scran)
library(DropletUtils)
library(edgeR)
library(Seurat)
library(dplyr)
library(RColorBrewer)
library(batchelor)
library(harmony)
}))
setwd("C:/Users/nilss/Documents/single cell analyysis/data sc")
filtered = readRDS(file.path("batch corrected/MHA batch corrected just EC.rds"))
suppressWarnings(suppressPackageStartupMessages({
library(ggplot2)
library(scater)
library(scran)
library(DropletUtils)
library(edgeR)
library(Seurat)
library(dplyr)
library(RColorBrewer)
library(batchelor)
library(harmony)
}))
setwd("C:/Users/nilss/Documents/single cell analyysis/data sc")
filtered = readRDS(file.path("batch corrected/MHA batch corrected only EC.rds"))
filtered_s = as.Seurat(filtered)
filtered_s <- filtered_s %>%
FindNeighbors(reduction = "HARMONY", dims = 1:20, graph.name) %>%
FindClusters(resolution = seq(0:0.9, by=0.1)) %>%
identity()
label.size=5
gridExtra::grid.arrange(
DimPlot(filtered_s, reduction = "TSNE", group="originalexp_snn_res.0", label = TRUE, pt.size = 1.5, label.size=label.size) +theme(legend.position="none") +ggtitle("Resolution = 0"),
DimPlot(filtered_s, reduction = "TSNE", group="originalexp_snn_res.0.1", label = TRUE, pt.size = 1.5, label.size=label.size) +theme(legend.position="none")+ggtitle("Resolution = 0.1"),
DimPlot(filtered_s, reduction = "TSNE", group="originalexp_snn_res.0.2", label = TRUE, pt.size = 1.5, label.size=label.size) +theme(legend.position="none")+ggtitle("Resolution = 0.2"),
DimPlot(filtered_s, reduction = "TSNE", group="originalexp_snn_res.0.3", label = TRUE, pt.size = 1.5, label.size=label.size) +theme(legend.position="none")+ggtitle("Resolution = 0.3"),
DimPlot(filtered_s, reduction = "TSNE", group="originalexp_snn_res.0.4", label = TRUE, pt.size = 1.5, label.size=label.size) +theme(legend.position="none")+ggtitle("Resolution = 0.4"),
DimPlot(filtered_s, reduction = "TSNE", group="originalexp_snn_res.0.5", label = TRUE, pt.size = 1.5, label.size=label.size) +theme(legend.position="none")+ggtitle("Resolution = 0.5"),
ncol=3)
#We include the clustering information into the dataset object
Idents(filtered_s) = filtered_s$originalexp_snn_res.0.2
filtered$cluster = filtered_s$originalexp_snn_res.0.2
#Now we can visualize the clustering in both TSNE and UMAP
gridExtra::grid.arrange(
plotTSNE(filtered, colour_by="cluster", text_by="cluster"),
plotUMAP(filtered, colour_by="cluster", text_by="cluster"),
ncol=2
)
all.markers <- FindAllMarkers(filtered_s, only.pos = TRUE, min.pct = 0.25, logfc.threshold = 0.25)
#We can explore the full table of marker genes
DT::datatable(all.markers, options = list(pageLength = 10, searching = TRUE))
#Or we select the top 10 marker genes in each cluster and visualize them
top10 <- all.markers %>% group_by(cluster) %>% top_n(n = 10, wt = avg_log2FC)
plotGroupedHeatmap(filtered, group="cluster", unique(top10$gene),center=T, scale=T, cluster_cols=F, cluster_rows=F, border_color=NA, color=rev(colorRampPalette(brewer.pal(n = 8, name = "RdYlBu"))(100)))
saveRDS(filtered, "C:/Users/nilss/Documents/single cell analyysis/data sc/batch corrected/MHA batch corrected heatmap only EC.rds")
suppressWarnings(suppressPackageStartupMessages({
library(scater)
library(RColorBrewer)
library(cowplot)
library(scran)
library(DropletUtils)
library(edgeR)
library(Seurat)
library(dplyr)
}))
setwd("C:/Users/nilss/Documents/single cell analyysis/data sc")
filtered = readRDS(file.path("batch corrected/MHA batch corrected heatmap only EC.rds"))
filtered_s = as.Seurat(filtered)
filtered_s <- filtered_s %>%
FindNeighbors(reduction = "HARMONY", dims = 1:20, graph.name) %>%
FindClusters(resolution = seq(0:0.9, by=0.1)) %>%
identity()
label.size=5
gridExtra::grid.arrange(
DimPlot(filtered_s, reduction = "TSNE", group="originalexp_snn_res.0", label = TRUE, pt.size = 1.5, label.size=label.size) +theme(legend.position="none") +ggtitle("Resolution = 0"),
DimPlot(filtered_s, reduction = "TSNE", group="originalexp_snn_res.0.1", label = TRUE, pt.size = 1.5, label.size=label.size) +theme(legend.position="none")+ggtitle("Resolution = 0.1"),
DimPlot(filtered_s, reduction = "TSNE", group="originalexp_snn_res.0.2", label = TRUE, pt.size = 1.5, label.size=label.size) +theme(legend.position="none")+ggtitle("Resolution = 0.2"),
DimPlot(filtered_s, reduction = "TSNE", group="originalexp_snn_res.0.3", label = TRUE, pt.size = 1.5, label.size=label.size) +theme(legend.position="none")+ggtitle("Resolution = 0.3"),
DimPlot(filtered_s, reduction = "TSNE", group="originalexp_snn_res.0.4", label = TRUE, pt.size = 1.5, label.size=label.size) +theme(legend.position="none")+ggtitle("Resolution = 0.4"),
DimPlot(filtered_s, reduction = "TSNE", group="originalexp_snn_res.0.5", label = TRUE, pt.size = 1.5, label.size=label.size) +theme(legend.position="none")+ggtitle("Resolution = 0.5"),
ncol=3)
#We include the clustering information into the dataset object
Idents(filtered_s) = filtered_s$originalexp_snn_res.0.2
filtered$cluster = filtered_s$originalexp_snn_res.0.2
#Now we can visualize the clustering in both TSNE and UMAP
gridExtra::grid.arrange(
plotTSNE(filtered, colour_by="cluster", text_by="cluster"),
plotUMAP(filtered, colour_by="cluster", text_by="cluster"),
ncol=2
)
genes = c("ATF3","ATF4", "EGR1", "JUNB", "FOS", "JUND", "JUN", "ZFP36","FOSB", "KLF4", "BTG2", "SOCS3", "KLF2", "CDKN1A", "IER2", "HES1", "DUSP1", "RHOB")
#, "GM12216"", "GM26802, "FTL1", "TMEM252",  not found
pdf("C:/Users/nilss/Documents/single cell analyysis/data sc/finalfig/MHA/MHA 0.2 dots final.pdf")
plotDots(filtered, group="cluster", genes, scale=TRUE, center=TRUE) +scale_y_discrete(limits=rev(genes)) +cowplot::theme_cowplot()+xlab(NULL)+ylab(NULL)+ theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
dev.off()
setwd("C:/Users/nilss/Documents/single cell analyysis/data sc")
filtered = readRDS(file.path("batch corrected/MHA samples batch corrected heatmap.rds"))
setwd("C:/Users/nilss/Documents/single cell analyysis/data sc")
filtered = readRDS(file.path("batch corrected/MHA batch corrected heatmap.rds"))
filtered_s = as.Seurat(filtered)
filtered_s <- filtered_s %>%
FindNeighbors(reduction = "HARMONY", dims = 1:20, graph.name) %>%
FindClusters(resolution = seq(0:0.9, by=0.1)) %>%
identity()
label.size=5
gridExtra::grid.arrange(
DimPlot(filtered_s, reduction = "TSNE", group="originalexp_snn_res.0", label = TRUE, pt.size = 1.5, label.size=label.size) +theme(legend.position="none") +ggtitle("Resolution = 0"),
DimPlot(filtered_s, reduction = "TSNE", group="originalexp_snn_res.0.1", label = TRUE, pt.size = 1.5, label.size=label.size) +theme(legend.position="none")+ggtitle("Resolution = 0.1"),
DimPlot(filtered_s, reduction = "TSNE", group="originalexp_snn_res.0.2", label = TRUE, pt.size = 1.5, label.size=label.size) +theme(legend.position="none")+ggtitle("Resolution = 0.2"),
DimPlot(filtered_s, reduction = "TSNE", group="originalexp_snn_res.0.3", label = TRUE, pt.size = 1.5, label.size=label.size) +theme(legend.position="none")+ggtitle("Resolution = 0.3"),
DimPlot(filtered_s, reduction = "TSNE", group="originalexp_snn_res.0.4", label = TRUE, pt.size = 1.5, label.size=label.size) +theme(legend.position="none")+ggtitle("Resolution = 0.4"),
DimPlot(filtered_s, reduction = "TSNE", group="originalexp_snn_res.0.5", label = TRUE, pt.size = 1.5, label.size=label.size) +theme(legend.position="none")+ggtitle("Resolution = 0.5"),
ncol=3)
#We include the clustering information into the dataset object
Idents(filtered_s) = filtered_s$originalexp_snn_res.0.2
filtered$cluster = filtered_s$originalexp_snn_res.0.2
#Now we can visualize the clustering in both TSNE and UMAP
gridExtra::grid.arrange(
plotTSNE(filtered, colour_by="cluster", text_by="cluster"),
plotUMAP(filtered, colour_by="cluster", text_by="cluster"),
ncol=2
)
pdf("C:/Users/nilss/Documents/single cell analyysis/data sc/finalfig/MHA/MHA TSNE PECAM1.pdf", width=8, height=4)
plotTSNE(filtered, colour_by="PECAM1")
dev.off()
pdf("C:/Users/nilss/Documents/single cell analyysis/data sc/finalfig/MHA/MHA TSNE Cluster.pdf", width=8, height=4)
plotTSNE(filtered, colour_by="cluster", text_by="cluster")
dev.off()
suppressWarnings(suppressPackageStartupMessages({
library(scater)
library(RColorBrewer)
library(cowplot)
library(scran)
library(DropletUtils)
library(edgeR)
library(Seurat)
library(dplyr)
library(GSVA)
}))
setwd("C:/Users/nilss/Documents/single cell analyysis/data sc")
merged = readRDS(file.path("batch corrected/MHA batch corrected heatmap only EC.rds"))
genesets = readRDS(file.path("ATF4dependent_genesets_human_mouse.rds"))
specie = "human"
if (specie == "human") {
genesets <- genesets[1:2]
} else if (specie == "mouse") {
genesets <- genesets[3:4]
}
gsva.es = merged
counts(gsva.es) = NULL
gsva.es <- gsva( gsva.es, genesets, verbose=TRUE)
reducedDim(gsva.es, "TSNE") = reducedDim(merged, "TSNE")
reducedDim(gsva.es, "UMAP") = reducedDim(merged, "UMAP")
logcounts(gsva.es) = assays(gsva.es)$es
pdf("C:/Users/nilss/Documents/single cell analyysis/data sc/finalfig/MHA/MHA GSVA.pdf")
gridExtra::grid.arrange(
plotTSNE(gsva.es, colour_by=rownames(gsva.es)[1]) +labs(color=rownames(gsva.es)[1]) + scale_colour_gradientn(colours = colorRampPalette(RColorBrewer::brewer.pal(n = 8, name = "YlOrRd"))(100)),
plotTSNE(gsva.es, colour_by=rownames(gsva.es)[2]) +labs(color=rownames(gsva.es)[2]) + scale_colour_gradientn(colours = colorRampPalette(RColorBrewer::brewer.pal(n = 8, name = "YlOrRd"))(100)),
ncol=1)
dev.off()
library(ggpubr)
library(ggplot2)
library(scales)
plotPathway <- function(pathway) {
barplot = cbind(as.data.frame(as.character(gsva.es$cluster)), as.data.frame(t(assays(gsva.es[pathway,])$es)))
colnames(barplot) = c("Cluster","Pathway")
ggplot(data=barplot, aes(x=Cluster, y=Pathway,fill=Cluster)) + geom_bar(stat = "summary", fun="mean") +xlab(NULL) + ggtitle(pathway) +ylab("GSVA score")+coord_flip()+ theme(plot.title = element_text(hjust = 0.5, size=20)) +cowplot::theme_cowplot()+theme(legend.position="none")
}
pdf("C:/Users/nilss/Documents/single cell analyysis/data sc/finalfig/MHA/MHA GSVA gene sig.pdf", width = 10, height = 5 )
plotPathway(rownames(gsva.es)[1])
dev.off()
suppressWarnings(suppressPackageStartupMessages({
library(scater)
library(RColorBrewer)
library(cowplot)
library(scran)
library(DropletUtils)
library(edgeR)
library(Seurat)
library(dplyr)
}))
setwd("C:/Users/nilss/Documents/single cell analyysis/data sc")
filtered = readRDS(file.path("batch corrected/MHA batch corrected heatmap only EC.rds"))
filtered_s = as.Seurat(filtered)
filtered_s <- filtered_s %>%
FindNeighbors(reduction = "HARMONY", dims = 1:20, graph.name) %>%
FindClusters(resolution = seq(0:0.9, by=0.1)) %>%
identity()
label.size=5
gridExtra::grid.arrange(
DimPlot(filtered_s, reduction = "TSNE", group="originalexp_snn_res.0", label = TRUE, pt.size = 1.5, label.size=label.size) +theme(legend.position="none") +ggtitle("Resolution = 0"),
DimPlot(filtered_s, reduction = "TSNE", group="originalexp_snn_res.0.1", label = TRUE, pt.size = 1.5, label.size=label.size) +theme(legend.position="none")+ggtitle("Resolution = 0.1"),
DimPlot(filtered_s, reduction = "TSNE", group="originalexp_snn_res.0.2", label = TRUE, pt.size = 1.5, label.size=label.size) +theme(legend.position="none")+ggtitle("Resolution = 0.2"),
DimPlot(filtered_s, reduction = "TSNE", group="originalexp_snn_res.0.3", label = TRUE, pt.size = 1.5, label.size=label.size) +theme(legend.position="none")+ggtitle("Resolution = 0.3"),
DimPlot(filtered_s, reduction = "TSNE", group="originalexp_snn_res.0.4", label = TRUE, pt.size = 1.5, label.size=label.size) +theme(legend.position="none")+ggtitle("Resolution = 0.4"),
DimPlot(filtered_s, reduction = "TSNE", group="originalexp_snn_res.0.5", label = TRUE, pt.size = 1.5, label.size=label.size) +theme(legend.position="none")+ggtitle("Resolution = 0.5"),
ncol=3)
#We include the clustering information into the dataset object
Idents(filtered_s) = filtered_s$originalexp_snn_res.0.3
filtered$cluster = filtered_s$originalexp_snn_res.0.3
#Now we can visualize the clustering in both TSNE and UMAP
gridExtra::grid.arrange(
plotTSNE(filtered, colour_by="cluster", text_by="cluster"),
plotUMAP(filtered, colour_by="cluster", text_by="cluster"),
ncol=2
)
genes = c("ATF3","ATF4", "EGR1", "JUNB", "FOS", "JUND", "JUN", "ZFP36","FOSB", "KLF4", "BTG2", "SOCS3", "KLF2", "CDKN1A", "IER2", "HES1", "DUSP1", "RHOB")
#, "GM12216"", "GM26802, "FTL1", "TMEM252",  not found
pdf("C:/Users/nilss/Documents/single cell analyysis/data sc/finalfig/MHA/MHA 0.3 dots final.pdf")
plotDots(filtered, group="cluster", genes, scale=TRUE, center=TRUE) +scale_y_discrete(limits=rev(genes)) +cowplot::theme_cowplot()+xlab(NULL)+ylab(NULL)+ theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
dev.off()
setwd("C:/Users/nilss/Documents/single cell analyysis/data sc")
filtered = readRDS(file.path("batch corrected/HRC batch corrected heatmap only EC.rds"))
filtered_s = as.Seurat(filtered)
setwd("C:/Users/nilss/Documents/single cell analyysis/data sc")
filtered = readRDS(file.path("batch corrected/HRC batch corrected heatmap only EC.rds"))
suppressWarnings(suppressPackageStartupMessages({
library(scater)
library(RColorBrewer)
library(cowplot)
library(scran)
library(DropletUtils)
library(edgeR)
library(Seurat)
library(dplyr)
}))
filtered_s = as.Seurat(filtered)
filtered_s <- filtered_s %>%
FindNeighbors(reduction = "HARMONY", dims = 1:20, graph.name) %>%
FindClusters(resolution = seq(0:0.9, by=0.1)) %>%
identity()
label.size=5
gridExtra::grid.arrange(
DimPlot(filtered_s, reduction = "TSNE", group="originalexp_snn_res.0", label = TRUE, pt.size = 1.5, label.size=label.size) +theme(legend.position="none") +ggtitle("Resolution = 0"),
DimPlot(filtered_s, reduction = "TSNE", group="originalexp_snn_res.0.1", label = TRUE, pt.size = 1.5, label.size=label.size) +theme(legend.position="none")+ggtitle("Resolution = 0.1"),
DimPlot(filtered_s, reduction = "TSNE", group="originalexp_snn_res.0.2", label = TRUE, pt.size = 1.5, label.size=label.size) +theme(legend.position="none")+ggtitle("Resolution = 0.2"),
DimPlot(filtered_s, reduction = "TSNE", group="originalexp_snn_res.0.3", label = TRUE, pt.size = 1.5, label.size=label.size) +theme(legend.position="none")+ggtitle("Resolution = 0.3"),
DimPlot(filtered_s, reduction = "TSNE", group="originalexp_snn_res.0.4", label = TRUE, pt.size = 1.5, label.size=label.size) +theme(legend.position="none")+ggtitle("Resolution = 0.4"),
DimPlot(filtered_s, reduction = "TSNE", group="originalexp_snn_res.0.5", label = TRUE, pt.size = 1.5, label.size=label.size) +theme(legend.position="none")+ggtitle("Resolution = 0.5"),
ncol=3)
suppressWarnings(suppressPackageStartupMessages({
library(ggplot2)
library(scater)
library(scran)
library(DropletUtils)
library(edgeR)
library(Seurat)
library(dplyr)
library(RColorBrewer)
library(batchelor)
library(harmony)
}))
setwd("C:/Users/nilss/Documents/single cell analyysis/data sc")
filtered = readRDS(file.path("batch corrected/HRC batch corrected just EC.rds"))
filtered_s = as.Seurat(filtered)
filtered_s <- filtered_s %>%
FindNeighbors(reduction = "HARMONY", dims = 1:20, graph.name) %>%
FindClusters(resolution = seq(0:0.9, by=0.1)) %>%
identity()
label.size=5
gridExtra::grid.arrange(
DimPlot(filtered_s, reduction = "TSNE", group="originalexp_snn_res.0", label = TRUE, pt.size = 1.5, label.size=label.size) +theme(legend.position="none") +ggtitle("Resolution = 0"),
DimPlot(filtered_s, reduction = "TSNE", group="originalexp_snn_res.0.1", label = TRUE, pt.size = 1.5, label.size=label.size) +theme(legend.position="none")+ggtitle("Resolution = 0.1"),
DimPlot(filtered_s, reduction = "TSNE", group="originalexp_snn_res.0.2", label = TRUE, pt.size = 1.5, label.size=label.size) +theme(legend.position="none")+ggtitle("Resolution = 0.2"),
DimPlot(filtered_s, reduction = "TSNE", group="originalexp_snn_res.0.3", label = TRUE, pt.size = 1.5, label.size=label.size) +theme(legend.position="none")+ggtitle("Resolution = 0.3"),
DimPlot(filtered_s, reduction = "TSNE", group="originalexp_snn_res.0.4", label = TRUE, pt.size = 1.5, label.size=label.size) +theme(legend.position="none")+ggtitle("Resolution = 0.4"),
DimPlot(filtered_s, reduction = "TSNE", group="originalexp_snn_res.0.5", label = TRUE, pt.size = 1.5, label.size=label.size) +theme(legend.position="none")+ggtitle("Resolution = 0.5"),
ncol=3)
#We include the clustering information into the dataset object
Idents(filtered_s) = filtered_s$originalexp_snn_res.0.2
filtered$cluster = filtered_s$originalexp_snn_res.0.2
#Now we can visualize the clustering in both TSNE and UMAP
gridExtra::grid.arrange(
plotTSNE(filtered, colour_by="cluster", text_by="cluster"),
plotUMAP(filtered, colour_by="cluster", text_by="cluster"),
ncol=2
)
all.markers <- FindAllMarkers(filtered_s, only.pos = TRUE, min.pct = 0.25, logfc.threshold = 0.25)
#We can explore the full table of marker genes
DT::datatable(all.markers, options = list(pageLength = 10, searching = TRUE))
#Or we select the top 10 marker genes in each cluster and visualize them
top10 <- all.markers %>% group_by(cluster) %>% top_n(n = 10, wt = avg_log2FC)
plotGroupedHeatmap(filtered, group="cluster", unique(top10$gene),center=T, scale=T, cluster_cols=F, cluster_rows=F, border_color=NA, color=rev(colorRampPalette(brewer.pal(n = 8, name = "RdYlBu"))(100)))
saveRDS(filtered, "C:/Users/nilss/Documents/single cell analyysis/data sc/batch corrected/HRC batch corrected heatmap only EC.rds")
setwd("C:/Users/nilss/Documents/single cell analyysis/data sc")
filtered = readRDS(file.path("batch corrected/HRC batch corrected heatmap only EC.rds"))
suppressWarnings(suppressPackageStartupMessages({
library(scater)
library(RColorBrewer)
library(cowplot)
library(scran)
library(DropletUtils)
library(edgeR)
library(Seurat)
library(dplyr)
}))
filtered_s = as.Seurat(filtered)
filtered_s <- filtered_s %>%
FindNeighbors(reduction = "HARMONY", dims = 1:20, graph.name) %>%
FindClusters(resolution = seq(0:0.9, by=0.1)) %>%
identity()
label.size=5
gridExtra::grid.arrange(
DimPlot(filtered_s, reduction = "TSNE", group="originalexp_snn_res.0", label = TRUE, pt.size = 1.5, label.size=label.size) +theme(legend.position="none") +ggtitle("Resolution = 0"),
DimPlot(filtered_s, reduction = "TSNE", group="originalexp_snn_res.0.1", label = TRUE, pt.size = 1.5, label.size=label.size) +theme(legend.position="none")+ggtitle("Resolution = 0.1"),
DimPlot(filtered_s, reduction = "TSNE", group="originalexp_snn_res.0.2", label = TRUE, pt.size = 1.5, label.size=label.size) +theme(legend.position="none")+ggtitle("Resolution = 0.2"),
DimPlot(filtered_s, reduction = "TSNE", group="originalexp_snn_res.0.3", label = TRUE, pt.size = 1.5, label.size=label.size) +theme(legend.position="none")+ggtitle("Resolution = 0.3"),
DimPlot(filtered_s, reduction = "TSNE", group="originalexp_snn_res.0.4", label = TRUE, pt.size = 1.5, label.size=label.size) +theme(legend.position="none")+ggtitle("Resolution = 0.4"),
DimPlot(filtered_s, reduction = "TSNE", group="originalexp_snn_res.0.5", label = TRUE, pt.size = 1.5, label.size=label.size) +theme(legend.position="none")+ggtitle("Resolution = 0.5"),
ncol=3)
#We include the clustering information into the dataset object
Idents(filtered_s) = filtered_s$originalexp_snn_res.0.2
filtered$cluster = filtered_s$originalexp_snn_res.0.2
#Now we can visualize the clustering in both TSNE and UMAP
gridExtra::grid.arrange(
plotTSNE(filtered, colour_by="cluster", text_by="cluster"),
plotUMAP(filtered, colour_by="cluster", text_by="cluster"),
ncol=2
)
pdf("C:/Users/nilss/Documents/single cell analyysis/data sc/finalfig/HRC/HRC TSNE Cluster only ec.pdf", width=10, height=5)
plotTSNE(filtered, colour_by="cluster", text_by="cluster")
dev.off()
install.packages(c("gsl","ggplot2","remotes","rmarkdown","UpSetR"))
install.packages("BiocManager")
BiocManager::install()
suppressWarnings(suppressPackageStartupMessages({
library(scater)
library(RColorBrewer)
library(cowplot)
library(scran)
library(DropletUtils)
library(edgeR)
library(Seurat)
library(dplyr)
library(GSVA)
}))
install.packages("epiwraps")
install.packages("installr")
library(installr)
updateR()
install.packages("epiwraps")
library(epiwraps)
install.packages("epiwraps")
install.packages("installr")
library(installr)
updateR()
gc()
install.packages("epiwraps")
install.packages(c("gsl","ggplot2","remotes","rmarkdown","UpSetR"))
install.packages("BiocManager")
BiocManager::install()
BiocManager::install(c("GenomicRanges", "rtracklayer", "EnrichedHeatmap", "AnnotationHub",
"ensembldb", "edgeR", "esATAC", "sechm", "motifmatchr","rGREAT",
"bsseq","DMRcate","data.table","InteractionSet","limma",
"universalmotif", "MotifDb", "TFBSTools", "Biostrings", "PWMEnrich",
"Rsubread","Rfastp"))
---
title: "assignment"
library(epiwraps)
BiocManager::install("ETHZ-INS/epiwraps")
library(epiwraps)
sessionInfo()
BiocManager::install("EnsDb.Mmusculus.v102")
suppressPackageStartupMessages({
library(AnnotationHub)
library(ensembldb)
library(GenomicRanges)
library(epiwraps)
library(EnsDb.Mmusculus.v102)
library(rtracklayer)
library(GenomicFeatures)
library(ggplot2)
})
suppressPackageStartupMessages({
library(AnnotationHub)
library(ensembldb)
library(GenomicRanges)
library(epiwraps)
library(rtracklayer)
library(GenomicFeatures)
library(ggplot2)
})
suppressPackageStartupMessages({
library(AnnotationHub)
library(ensembldb)
library(GenomicRanges)
library(epiwraps)
library(rtracklayer)
library(GenomicFeatures)
library(ggplot2)
})
# Create an AnnotationHub object
ah <- AnnotationHub()
